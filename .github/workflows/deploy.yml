name: Deploy to DigitalOcean

on:
  workflow_dispatch:  # Manual trigger for deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Here we pass GitHub Secrets as environment variables
      SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
      DO_HOST: ${{ vars.DO_HOST }}
      DO_USERNAME: ${{ vars.DO_USERNAME }}
      DATABASE_CLIENT: ${{ vars.DATABASE_CLIENT }}
      DATABASE_HOST: ${{ vars.DATABASE_HOST }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
      APP_KEYS: ${{ vars.APP_KEYS }}
      ADMIN_JWT_SECRET: ${{ vars.ADMIN_JWT_SECRET }}
      API_TOKEN_SALT: ${{ vars.API_TOKEN_SALT }}
      TRANSFER_TOKEN_SALT: ${{ vars.TRANSFER_TOKEN_SALT }}

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # Use the version of Node.js that your app requires

      # Step 3: Create .env file using the environment variables (secrets)
      - name: Create .env file
        run: |
          echo "DATABASE_CLIENT=$DATABASE_CLIENT" >> .env
          echo "DATABASE_HOST=$DATABASE_HOST" >> .env
          echo "DATABASE_PORT=$DATABASE_PORT" >> .env
          echo "DATABASE_NAME=$DATABASE_NAME" >> .env
          echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
          echo "APP_KEYS=$APP_KEYS" >> .env
          echo "ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET" >> .env
          echo "API_TOKEN_SALT=$API_TOKEN_SALT" >> .env
          echo "TRANSFER_TOKEN_SALT=$TRANSFER_TOKEN_SALT" >> .env
          

      # Step 4: Copy files to DigitalOcean server using SCP
      - name: Debug SSH Key
        run: |
        echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key
        chmod 600 /tmp/ssh_key
        ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no root@64.227.150.143 echo "SSH connection successful"

      - name: Copy files to DigitalOcean
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/ssh_key  # Store the SSH private key in a temporary file
          chmod 600 /tmp/ssh_key  # Set the correct permissions for the key
          cat /tmp/ssh_key

          # Use SCP to copy the code and .env file to the server
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no -r . root@$DO_HOST:/software-finder
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no .env root@$DO_HOST:/software-finder/.env

      # Step 5: SSH into the server and run deployment commands
      - name: Deploy to DigitalOcean via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: $DO_HOST
          username: $DO_USERNAME
          key: $SSH_PRIVATE_KEY
          script: |
            cd /software-finder || exit
            git pull origin main  # Pull the latest changes (if needed)
            yarn install  # Install dependencies
            yarn build  # Build Strapi app
            docker-compose down  # Stop any running containers
            docker-compose up -d  # Restart containers
